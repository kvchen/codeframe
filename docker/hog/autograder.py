"""Returns the exact win rate for a given final_strategy.

Expects the following files in the current directory:

hog.py

Because the state space for this game is relatively small, it 
can be computed to a large recursive depth, giving exact win rates.

Questions/comments: kvchen@berkeley.edu
"""

__version__ = '2.1'

from math import factorial, floor
from datetime import datetime


dice_table = {'six_sided': {0: {0: 1.0}, 1: {1: 0.16666666666666663, 2: 0.16666666666666666, 3: 0.16666666666666666, 4: 0.16666666666666666, 5: 0.16666666666666666, 6: 0.16666666666666666}, 2: {1: 0.30555555555555547, 2: 0.0, 3: 0.0, 4: 0.027777777777777776, 5: 0.05555555555555555, 6: 0.08333333333333333, 7: 0.1111111111111111, 8: 0.1388888888888889, 9: 0.1111111111111111, 10: 0.08333333333333333, 11: 0.05555555555555555, 12: 0.027777777777777776}, 3: {1: 0.42129629629629617, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.004629629629629629, 7: 0.013888888888888888, 8: 0.027777777777777776, 9: 0.046296296296296294, 10: 0.06944444444444445, 11: 0.08333333333333333, 12: 0.08796296296296297, 13: 0.08333333333333333, 14: 0.06944444444444445, 15: 0.046296296296296294, 16: 0.027777777777777776, 17: 0.013888888888888888, 18: 0.004629629629629629}, 4: {1: 0.5177469135802468, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0007716049382716049, 9: 0.0030864197530864196, 10: 0.007716049382716049, 11: 0.015432098765432098, 12: 0.02700617283950617, 13: 0.040123456790123455, 14: 0.05246913580246913, 15: 0.06172839506172839, 16: 0.06558641975308642, 17: 0.06172839506172839, 18: 0.05246913580246913, 19: 0.040123456790123455, 20: 0.02700617283950617, 21: 0.015432098765432098, 22: 0.007716049382716049, 23: 0.0030864197530864196, 24: 0.0007716049382716049}, 5: {1: 0.598122427983539, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0001286008230452675, 11: 0.0006430041152263374, 12: 0.0019290123456790122, 13: 0.0045010288065843625, 14: 0.009002057613168725, 15: 0.015560699588477367, 16: 0.023791152263374485, 17: 0.03279320987654321, 18: 0.0411522633744856, 19: 0.04693930041152263, 20: 0.048996913580246916, 21: 0.04693930041152263, 22: 0.0411522633744856, 23: 0.03279320987654321, 24: 0.023791152263374485, 25: 0.015560699588477367, 26: 0.009002057613168725, 27: 0.0045010288065843625, 28: 0.0019290123456790122, 29: 0.0006430041152263374, 30: 0.0001286008230452675}, 6: {1: 0.6651020233196159, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 2.143347050754458e-05, 13: 0.0001286008230452675, 14: 0.0004501028806584362, 15: 0.0012002743484224967, 16: 0.002700617283950617, 17: 0.005272633744855967, 18: 0.009130658436213992, 19: 0.01427469135802469, 20: 0.020383230452674896, 21: 0.02670610425240055, 22: 0.03227880658436214, 23: 0.03613683127572016, 24: 0.037530006858710566, 25: 0.03613683127572016, 26: 0.03227880658436214, 27: 0.02670610425240055, 28: 0.020383230452674896, 29: 0.01427469135802469, 30: 0.009130658436213992, 31: 0.005272633744855967, 32: 0.002700617283950617, 33: 0.0012002743484224967, 34: 0.0004501028806584362, 35: 0.0001286008230452675, 36: 2.143347050754458e-05}, 7: {1: 0.7209183527663465, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 3.5722450845907635e-06, 15: 2.5005715592135344e-05, 16: 0.00010002286236854138, 17: 0.00030006858710562417, 18: 0.0007501714677640603, 19: 0.0016253715134887975, 20: 0.003125714449016918, 21: 0.005429812528577961, 22: 0.008626971879286694, 23: 0.01262788637402835, 24: 0.01712891518061271, 25: 0.021629943987197073, 26: 0.025505829903978053, 27: 0.028131430041152265, 28: 0.02906021376314586, 29: 0.028131430041152265, 30: 0.025505829903978053, 31: 0.021629943987197073, 32: 0.01712891518061271, 33: 0.01262788637402835, 34: 0.008626971879286694, 35: 0.005429812528577961, 36: 0.003125714449016918, 37: 0.0016253715134887975, 38: 0.0007501714677640603, 39: 0.00030006858710562417, 40: 0.00010002286236854138, 41: 2.5005715592135344e-05, 42: 3.5722450845907635e-06}, 8: {1: 0.7674319606386221, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0, 16: 5.953741807651273e-07, 17: 4.762993446121018e-06, 18: 2.143347050754458e-05, 19: 7.144490169181528e-05, 20: 0.000196473479652492, 21: 0.0004667733577198598, 22: 0.0009835581466239903, 23: 0.0018718564243255602, 24: 0.003259673639689072, 25: 0.00523929279073312, 26: 0.007823216735253772, 27: 0.010907254991617132, 28: 0.014253257887517147, 29: 0.017504000914494743, 30: 0.020242722146014327, 31: 0.02207647462277092, 32: 0.02272245560890108, 33: 0.02207647462277092, 34: 0.020242722146014327, 35: 0.017504000914494743, 36: 0.014253257887517147, 37: 0.010907254991617132, 38: 0.007823216735253772, 39: 0.00523929279073312, 40: 0.003259673639689072, 41: 0.0018718564243255602, 42: 0.0009835581466239903, 43: 0.0004667733577198598, 44: 0.000196473479652492, 45: 7.144490169181528e-05, 46: 2.143347050754458e-05, 47: 4.762993446121018e-06, 48: 5.953741807651273e-07}, 9: {1: 0.8061933005321851, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0, 16: 0.0, 17: 0.0, 18: 9.92290301275212e-08, 19: 8.930612711476909e-07, 20: 4.465306355738455e-06, 21: 1.6372789971041e-05, 22: 4.9118369913123e-05, 23: 0.0001268147005029721, 24: 0.000289947226032617, 25: 0.0005983510516689529, 26: 0.001129722508001829, 27: 0.0019701923931819336, 28: 0.0031962662894375856, 29: 0.004850215763603109, 30: 0.006913782674135041, 31: 0.009287837219935985, 32: 0.01178840877914952, 33: 0.014163951760402377, 34: 0.016133151863283037, 35: 0.017437021319158665, 36: 0.017893474857745263, 37: 0.017437021319158665, 38: 0.016133151863283037, 39: 0.014163951760402377, 40: 0.01178840877914952, 41: 0.009287837219935985, 42: 0.006913782674135041, 43: 0.004850215763603109, 44: 0.0031962662894375856, 45: 0.0019701923931819336, 46: 0.001129722508001829, 47: 0.0005983510516689529, 48: 0.000289947226032617, 49: 0.0001268147005029721, 50: 4.9118369913123e-05, 51: 1.6372789971041e-05, 52: 4.465306355738455e-06, 53: 8.930612711476909e-07, 54: 9.92290301275212e-08}, 10: {1: 0.8384944171101543, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0, 16: 0.0, 17: 0.0, 18: 0.0, 19: 0.0, 20: 1.65381716879202e-08, 21: 1.65381716879202e-07, 22: 9.095994428356111e-07, 23: 3.6383977713424442e-06, 24: 1.1824792756862945e-05, 25: 3.2944038002337044e-05, 26: 8.111973212924859e-05, 27: 0.000180100689681451, 28: 0.00036565897601991565, 29: 0.0006858379798980507, 30: 0.0011974132447204863, 31: 0.001957458000982235, 32: 0.003010029938059916, 33: 0.004369715723382276, 34: 0.00600608512104354, 35: 0.007834032699537672, 36: 0.009714522049484326, 37: 0.011468395156988264, 38: 0.012902668096623144, 39: 0.013844103519958, 40: 0.014172303537104778, 41: 0.013844103519958, 42: 0.012902668096623144, 43: 0.011468395156988264, 44: 0.009714522049484326, 45: 0.007834032699537672, 46: 0.00600608512104354, 47: 0.004369715723382276, 48: 0.003010029938059916, 49: 0.001957458000982235, 50: 0.0011974132447204863, 51: 0.0006858379798980507, 52: 0.00036565897601991565, 53: 0.000180100689681451, 54: 8.111973212924859e-05, 55: 3.2944038002337044e-05, 56: 1.1824792756862945e-05, 57: 3.6383977713424442e-06, 58: 9.095994428356111e-07, 59: 1.65381716879202e-07, 60: 1.65381716879202e-08}}, 'four_sided': {0: {0: 1.0}, 1: {1: 0.25, 2: 0.25, 3: 0.25, 4: 0.25}, 2: {1: 0.4375, 2: 0.0, 3: 0.0, 4: 0.0625, 5: 0.125, 6: 0.1875, 7: 0.125, 8: 0.0625}, 3: {1: 0.578125, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.015625, 7: 0.046875, 8: 0.09375, 9: 0.109375, 10: 0.09375, 11: 0.046875, 12: 0.015625}, 4: {1: 0.68359375, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.00390625, 9: 0.015625, 10: 0.0390625, 11: 0.0625, 12: 0.07421875, 13: 0.0625, 14: 0.0390625, 15: 0.015625, 16: 0.00390625}, 5: {1: 0.7626953125, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0009765625, 11: 0.0048828125, 12: 0.0146484375, 13: 0.029296875, 14: 0.0439453125, 15: 0.0498046875, 16: 0.0439453125, 17: 0.029296875, 18: 0.0146484375, 19: 0.0048828125, 20: 0.0009765625}, 6: {1: 0.822021484375, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.000244140625, 13: 0.00146484375, 14: 0.005126953125, 15: 0.01220703125, 16: 0.02197265625, 17: 0.03076171875, 18: 0.034423828125, 19: 0.03076171875, 20: 0.02197265625, 21: 0.01220703125, 22: 0.005126953125, 23: 0.00146484375, 24: 0.000244140625}, 7: {1: 0.86651611328125, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 6.103515625e-05, 15: 0.00042724609375, 16: 0.001708984375, 17: 0.00469970703125, 18: 0.00982666015625, 19: 0.0162353515625, 20: 0.02178955078125, 21: 0.02398681640625, 22: 0.02178955078125, 23: 0.0162353515625, 24: 0.00982666015625, 25: 0.00469970703125, 26: 0.001708984375, 27: 0.00042724609375, 28: 6.103515625e-05}, 8: {1: 0.8998870849609375, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0, 16: 1.52587890625e-05, 17: 0.0001220703125, 18: 0.00054931640625, 19: 0.001708984375, 20: 0.004058837890625, 21: 0.0076904296875, 22: 0.011962890625, 23: 0.0155029296875, 24: 0.0168914794921875, 25: 0.0155029296875, 26: 0.011962890625, 27: 0.0076904296875, 28: 0.004058837890625, 29: 0.001708984375, 30: 0.00054931640625, 31: 0.0001220703125, 32: 1.52587890625e-05}, 9: {1: 0.9249153137207031, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0, 16: 0.0, 17: 0.0, 18: 3.814697265625e-06, 19: 3.4332275390625e-05, 20: 0.000171661376953125, 21: 0.0005950927734375, 22: 0.00157928466796875, 23: 0.00336456298828125, 24: 0.00592803955078125, 25: 0.0087890625, 26: 0.011089324951171875, 27: 0.011974334716796875, 28: 0.011089324951171875, 29: 0.0087890625, 30: 0.00592803955078125, 31: 0.00336456298828125, 32: 0.00157928466796875, 33: 0.0005950927734375, 34: 0.000171661376953125, 35: 3.4332275390625e-05, 36: 3.814697265625e-06}, 10: {1: 0.9436864852905273, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0, 16: 0.0, 17: 0.0, 18: 0.0, 19: 0.0, 20: 9.5367431640625e-07, 21: 9.5367431640625e-06, 22: 5.245208740234375e-05, 23: 0.0002002716064453125, 24: 0.0005865097045898438, 25: 0.001384735107421875, 26: 0.0027179718017578125, 27: 0.004520416259765625, 28: 0.006451606750488281, 29: 0.007963180541992188, 30: 0.008538246154785156, 31: 0.007963180541992188, 32: 0.006451606750488281, 33: 0.004520416259765625, 34: 0.0027179718017578125, 35: 0.001384735107421875, 36: 0.0005865097045898438, 37: 0.0002002716064453125, 38: 5.245208740234375e-05, 39: 9.5367431640625e-06, 40: 9.5367431640625e-07}}}

def calculate_win_rate(p1_strategy, p2_strategy, swap = False):
    """Calculates the true win rate for p1 in a scenario where p1_strategy
    takes precedence over p2_strategy in making the first move unless swap 
    is True, in which case p2 begins the game.
    """
    score_sequence = [[[None, None] for x in range(101)] for y in range(101)]
    
    def evaluate_sequences(p1=0, p2=0, who=swap):
        """A recursive search for which branches result in a p1 win.
        Calculates the true win rate.
        """
        if p1 >= hog.GOAL_SCORE:
            return 1
        elif p2 >= hog.GOAL_SCORE:
            return 0
        else:
            if score_sequence[p1][p2][who] is None:
                num_rolls = (p1_strategy, p2_strategy)[who]((p1, p2)[who], (p2, p1)[who])

                # Checks for hog wild rule
                dice = ('four_sided', 'six_sided')[(p1 + p2) % 7 != 0]

                # Loops through all possible number of rolls
                branches = []
                possible_sums = dice_table[dice][num_rolls]

                for possible_sum in possible_sums:
                    branch_prb = possible_sums[possible_sum]

                    home, away = (p1, p2)[who], (p2, p1)[who]

                    # Checks for free bacon
                    if num_rolls == 0:
                        tens, ones = away // 10, away % 10
                        home += abs(tens - ones) + 1
                    else:
                        home += possible_sum

                    # Checks for swine swap
                    if (home * 2 == away) or (away * 2 == home):
                        home, away = away, home

                    branches.append(branch_prb * evaluate_sequences((home, away)[who], (away, home)[who], 1-who))
                score_sequence[p1][p2][who] = sum(branches)
            return score_sequence[p1][p2][who]

    evaluate_sequences()
    return score_sequence[0][0][swap]


if __name__ == '__main__':
    import snippet as hog

    p1_strategy = hog.final_strategy
    p2_strategy = hog.always_roll(5)
    
    startTime = datetime.now()
    print("Calculating exact win rate...")
    true_win_rate = (calculate_win_rate(p1_strategy, p2_strategy) + 
        calculate_win_rate(p1_strategy, p2_strategy, swap = True)) / 2
    print("True average win rate of final_strategy is %s" % true_win_rate)
    print("Script finished in %s" % str(datetime.now() - startTime))


